# datacollector/management/commands/collect_data.py
import yfinance as yf
import requests
from bs4 import BeautifulSoup
import telegram
import asyncio  # <--- –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.conf import settings
from datacollector.models import Ticker, StockData, NewsArticle
from decimal import Decimal, ROUND_DOWN
from django.db import transaction

# –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
TARGET_TICKERS = ["AAPL", "GOOGL", "MSFT", "AMZN", "TSLA", "NVDA"]

# –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
ALERT_THRESHOLD = 0.5  # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


class Command(BaseCommand):
    help = '–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º –∏ –Ω–æ–≤–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤.'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        self.bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

    def handle(self, *args, **kwargs):
        self.stdout.write(self.style.SUCCESS('–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...'))
        self.collect_stock_prices()
        self.stdout.write(self.style.SUCCESS('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!'))

    # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ú–µ—Ç–æ–¥ send_telegram_alert —Å—Ç–∞–ª async
    async def send_telegram_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π —á–∞—Ç Telegram."""
        try:
            # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª–µ–Ω–æ await
            await self.bot.send_message(
                chat_id=settings.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            self.stdout.write(self.style.SUCCESS(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç: {message}'))
        except Exception as e:
            self.stderr.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}'))
            import traceback
            traceback.print_exc()

    def check_price_alert(self, ticker_obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–∑–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
        latest_data = StockData.objects.filter(ticker=ticker_obj).order_by('-date')[:2]

        if len(latest_data) < 2:
            return

        today_data = latest_data[0]
        yesterday_data = latest_data[1]

        price_today = today_data.close_price
        price_yesterday = yesterday_data.close_price

        if price_yesterday == Decimal('0'):
            return

        change_percent = ((price_today - price_yesterday) / price_yesterday) * Decimal('100')

        if abs(change_percent) >= Decimal(str(ALERT_THRESHOLD)):
            direction = "üìà –†–û–°–¢" if change_percent > 0 else "üìâ –ü–ê–î–ï–ù–ò–ï"

            message = (
                f"<b>üö® –í–Ω–∏–º–∞–Ω–∏–µ! –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è {ticker_obj.symbol}</b>\n\n"
                f"{direction}\n\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: <b>{change_percent.quantize(Decimal('0.01'), rounding=ROUND_DOWN)}%</b>\n"
                f"–¶–µ–Ω–∞ –≤—á–µ—Ä–∞: ${price_yesterday.quantize(Decimal('0.01'), rounding=ROUND_DOWN)}\n"
                f"–¶–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>${price_today.quantize(Decimal('0.01'), rounding=ROUND_DOWN)}</b>"
            )
            # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            asyncio.run(self.send_telegram_alert(message))

    def collect_stock_prices(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∞–∫—Ü–∏–π."""
        self.stdout.write('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∞–∫—Ü–∏–π...')
        for symbol in TARGET_TICKERS:
            ticker_obj, created = Ticker.objects.get_or_create(symbol=symbol)
            if created:
                self.stdout.write(self.style.SUCCESS(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä: {symbol}'))
            else:
                self.stdout.write(f'–¢–∏–∫–µ—Ä {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.')

            try:
                data = yf.download(symbol, period="5d", auto_adjust=True)

                if data.empty:
                    self.stdout.write(self.style.WARNING(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ yfinance –¥–ª—è {symbol} –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.'))
                    continue

                self.stdout.write(f"–î–∞–Ω–Ω—ã–µ –∏–∑ yfinance –¥–ª—è {symbol} –ø–æ–ª—É—á–µ–Ω—ã. {len(data)} —Å—Ç—Ä–æ–∫.")

                with transaction.atomic():
                    for index, row in data.iterrows():
                        try:
                            open_p = float(row['Open'].item())
                            high_p = float(row['High'].item())
                            low_p = float(row['Low'].item())
                            close_p = float(row['Close'].item())
                            volume_val = int(row['Volume'].item())
                        except (ValueError, KeyError, AttributeError) as ve:
                            self.stderr.write(self.style.ERROR(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è {symbol} –Ω–∞ {index.date()}: {ve} - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É."))
                            continue

                        StockData.objects.update_or_create(
                            ticker=ticker_obj,
                            date=index.date(),
                            defaults={
                                'open_price': Decimal(str(open_p)),
                                'high_price': Decimal(str(high_p)),
                                'low_price': Decimal(str(low_p)),
                                'close_price': Decimal(str(close_p)),
                                'volume': volume_val
                            }
                        )

                self.stdout.write(self.style.SUCCESS(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.'))

                self.check_price_alert(ticker_obj)

            except Exception as e:
                self.stderr.write(self.style.ERROR(f'–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}'))
                import traceback
                traceback.print_exc()

    def collect_market_news(self):
        """–ü–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏."""
        self.stdout.write('–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π...')
        url = "https://www.marketwatch.com/latest-news"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            articles = soup.find_all('div', class_='article__content')
            news_to_create = []
            for article in articles:
                headline_tag = article.find('a', class_='link')
                if not headline_tag:
                    continue
                headline = headline_tag.get_text(strip=True)
                link = headline_tag['href']
                if not NewsArticle.objects.filter(url=link).exists():
                    news_to_create.append(
                        NewsArticle(
                            headline=headline,
                            url=link,
                            source='MarketWatch'
                        )
                    )
            if news_to_create:
                with transaction.atomic():
                    NewsArticle.objects.bulk_create(news_to_create)
                self.stdout.write(self.style.SUCCESS(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(news_to_create)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.'))
            else:
                self.stdout.write('–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

        except requests.exceptions.RequestException as e:
            self.stderr.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}'))
            self.stderr.write(self.style.WARNING(
                "–í–æ–∑–º–æ–∂–Ω–æ, MarketWatch –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏)."))
            import traceback
            traceback.print_exc()